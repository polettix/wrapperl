#!/usr/bin/env perl
use strict;
use warnings;
use File::Spec::Functions qw<
  rel2abs
  splitpath
  splitdir
  catdir
  catpath
  file_name_is_absolute
>;
use Cwd qw< getcwd realpath >;
use Pod::Usage qw< pod2usage >;
my $VERSION = '0.02';

my $me = absolute($0);

# is this "$me" special, i.e. is it 'wrapperl' or 'wrapperldoc'?
my (undef, undef, $basename) = splitpath($me);
my $is_special = ($basename =~ m{\A wrapperl (?: doc )? \z}mxs);

# find and execute wrapperl.env, which will return path to real perl
my $envfile = find_envfile($is_special ? getcwd() : $me);
my $perl = do $envfile
   or die "reading $envfile failed\n"; # "0" is not acceptable :)

# the command to execute will start with this $perl
my @command = ($perl);

# Establish real target, "wrapperldoc" is treated specially
if (! $is_special) {
   push @command, "$me.pl";
}
elsif ($basename eq 'wrapperldoc') {
   my ($v, $d) = splitpath($perl);
   push @command, catpath($v, $d, 'perldoc');
}

exec {$command[0]} @command, @ARGV;

die "failed execution of @command\n";

sub find_envfile {
   my ($start) = @_;
   my ($volume, $directories) = splitpath($start, -d $start);
   my @path = splitdir($directories);
   my $envfile;
   while (@path) {
      my $candidate = catpath($volume, catdir(@path), 'wrapperl.env');
      return $candidate if -e $candidate;
      pop @path;
   } ## end while (@path)
   die "could not find wrapperl.env\n" unless defined $envfile;
   return; # never reached
}

sub absolute {
   my ($path) = @_;
   return $path if file_name_is_absolute($path);
   return rel2abs($path);
}


__END__

=pod

=encoding utf-8

=head1 NAME

wrapperl - simple wrapper system for Perl

=head1 SYNOPSYS

   # the "real" Perl program goes into somename.pl
   $ vi somename.pl # and put your stuff inside

   # the "wrapper" is a symlink to wrapperl, named somename
   # in same directory as somename.pl
   $ ln -s /path/to/wrapperl somename

   # the configuration is put in a wrapperl.env file, which is
   # actually a Perl file with a configuration inside. It is put
   # in the same directory or any ancestor as somename.pl/somename
   $ cat wrapperl.env
   {
      PERL => '/usr/bin/perl',
      PERL5LIB => '',
   }

=head1 DESCRIPTION

This program lets you wrap a perl program with some local-specific
configurations.

=head2 Normal Usage

Using it is simple and has three steps:

=over

=item 1.

you assign your program a name that ends in C<.pl>, e.g. C<somename.pl>;

=item 2.

you create a symbolic link to C<wrapperl> inside the same directory
as your program, and name the symbolic link the same as the program
but without the C<.pl> extension, e.g. C<somename>;

=item  3.

you create a small Perl program called C<wrapperl.env> located inside the
same directory as the main program, or any of its ancestors (the first
that is found while backtracking is used).

=back

This small program in the third step is supposed
to set the needed environment variables, like C<$ENV{PERL5LIB}>, and also
return the path to the C<perl> program to use for invoking the program
in the modified environment. If you want to reuse the same C<perl>, just
use C<$^X> as the last statement in your C<wrapperl.env> file, otherwise
put a string with the desired path.

This is really it! Now you can call the symbolic link created in step
2, and the real program in step 1 will be called actually, in the modified
environment and with the C<perl> you set inside the C<wrapperl.env> file.

=head2 Special Or No Links

If the links you create are called either C<wrapperl> or C<wrapperldoc>,
or you invoke the script directly, a special behaviour will be triggered.

In particular, C<wrapperl> will look for a C<wrapperl.env> file
I<starting from the current directory>, and call the relevant program
(i.e. either C<perl> or C<perldoc>). This is supposed to be an easy
shortcut to let you call "the right program" among these two useful
ones.

=head1 OPTIONS

This program really has no options.

=head1 DIAGNOSTICS

=over

=item C<< could not find wrapperl.env >>

C<wrapperl> tried to find C<wrapperl.env> in the same directory as
the symbolic link to it, or in any ancestor directory, but failed to
find one.

=item C<< reading %s failed >>

the C<wrapperl.env> file that was found cannot be read properly. The
error message indicates the path to the troublesome file.

=item C<< failed execution of %s >>

C<wrapperl> tried to execute the command (reported in the error message)
but failed.

=back

=head1 CONFIGURATION AND ENVIRONMENT

C<wrapperl> does not have a configuration per-se, but is of course
relying on the presence of a C<wrapperl.env> file for proper
functioning - see L</DESCRIPTION>.

=head1 DEPENDENCIES

C<wrapperl> relies on modules that are part of any standard Perl
distribution as of release 5.6.0.

=head1 BUGS AND LIMITATIONS

Please report bugs and hopefully solutions through the GitHub
repository at L<https://github.com/polettix/wrapperl>.

=head1 AUTHOR

Flavio Poletti <polettix@cpan.org>

=head1 LICENSE AND COPYRIGHT

Copyright (c) 2015, Flavio Poletti C<polettix@cpan.org>.

This module is free software.  You can redistribute it and/or
modify it under the terms of the Artistic License 2.0. Please read
the full license in the F<LICENSE> file inside the distribution,
as you can find at L<https://github.com/polettix/wrapperl>.

This program is distributed in the hope that it will be useful,
but without any warranty; without even the implied warranty of
merchantability or fitness for a particular purpose.

=cut
